import numpy as np
import matplotlib.pyplot as plt


def read_file(some_txt):  # define a fnc to read in text files as floats to manipulate later
    return_list = []
    for line in some_txt:
        return_list.append(float(line.strip()))
    return return_list


# import txt files
hecka_wind = open("hecka_wind.txt", "r")
little_wind = open("little_wind.txt", "r")
lotta_wind = open("lotta_wind.txt", "r")
mother_of = open("mother_of.txt", "r")
noooooo = open("noooooo.txt", "r")
son_of_a = open("son_of_a.txt", "r")
list_of_files = [hecka_wind, little_wind, lotta_wind, mother_of, noooooo, son_of_a]
list_of_files_strings = ['hecka_wind', 'little_wind', 'lotta_wind', 'mother_of', 'noooooo', 'son_of_a']

# initial conditions
mass_of_obj = 1  # kg
initial_velocity = 50  # m/s
angle_of_traj = 30 * np.pi / 180  # radians
y_final = 0  # meters
gravity = -9.8  # m/s**2
t_step = 0.01  # seconds
t_min = 0  # seconds
t_max = 10  # seconds
t_range = np.arange(t_min, t_max + t_step, t_step)
y_velocity = initial_velocity * np.sin(angle_of_traj)
x_velocity = initial_velocity * np.cos(angle_of_traj)

# read the contents of the .txt files
file_read_list = []
for i in list_of_files:
    file_read_list.append(read_file(i))

"""
Part 1
Find total time that projectile is in air
Find time to projectile arc, then *2 (for up, then down)
v_f = v_0 + a * t

Find x(t)
v_x = d_x / t
x_velocity is constant (no acceleration acting on it) ...(yet)

Find y(t)
d = v_0 * t + (1/2) * a * t**2
"""

total_arc_time = 2 * y_velocity / -gravity
total_arc_time_list = np.arange(t_min, total_arc_time, t_step)

x_distance = x_velocity * total_arc_time_list
y_distance = y_velocity * total_arc_time_list + (1 / 2) * gravity * total_arc_time_list ** 2

plt.plot(x_distance, y_distance)
plt.title("Part One")
plt.xlabel("Distance (m)")
plt.ylabel("Height (m)")
plt.figlegend([f'Max height = {round(max(y_distance), 2)} \n Max distance = {round(x_distance[-1], 2)}'])
plt.show()

"""
Part 2
Plot the trajectories if there is an x-force
The x-forces are in the read-in files
"""

air_resistance_x_list = []
for file in file_read_list:
    new_list = []
    index = 0
    for time_iteration in total_arc_time_list:
        new_list.append(x_velocity * time_iteration + (1 / 2) * file[index] * time_iteration ** 2)
        index += 1
    air_resistance_x_list.append(new_list)

y_distance_new = y_distance[:len(total_arc_time_list)]
for i in range(len(air_resistance_x_list)):
    plt.plot(air_resistance_x_list[i], y_distance_new)

plt.title("Part Two")
plt.xlabel("Distance (m)")
plt.ylabel("Height (m)")
plt.figlegend(list_of_files_strings)
plt.show()

"""
Part 3a
Choose a text file to use
Define a list of four new velocities
Plot the trajectory of these four velocities w/ all the other values remaining the same as previous parts
Since mass of object is 1kg, just assume force = acceleration
"""


def time_kinematic(y_vel_ini, const_acc, iteration_step):
    return_time = 2 * (-y_vel_ini) / const_acc
    return_time_list = list(np.arange(0, return_time, iteration_step))
    return return_time_list


def x_distances(list_of_time, v_initial, force):
    x_distance_list = []
    for n in range(len(list_of_time)):
        x_distance_list.append(v_initial * list_of_time[n] + (1 / 2) * force[n] * list_of_time[n] ** 2)
    return x_distance_list


def y_distances(list_of_time, v_initial):
    y_distances_list = []
    for t in list_of_time:
        y_distances_list.append(v_initial * t + (1 / 2) * (-9.8) * t ** 2)
    return y_distances_list


list_of_forces = file_read_list[2]
varying_velocities = [10, 20, 30, 40]
y_velocity_part_three = []
x_velocity_part_three = []
max_height_part_three = []
max_distance_part_three = []
fig_legend_list = []

for velocity in varying_velocities:
    y_velocity_part_three.append(velocity * np.sin(angle_of_traj))
    x_velocity_part_three.append(velocity * np.cos(angle_of_traj))

for index in range(len(varying_velocities)):
    new_list_of_time = time_kinematic(y_velocity_part_three[index], gravity, t_step)
    new_list_of_x = x_distances(new_list_of_time, x_velocity_part_three[index], list_of_forces)
    new_list_of_y = y_distances(new_list_of_time, y_velocity_part_three[index])
    max_distance_part_three.append(round(new_list_of_x[-1], 2))
    max_height_part_three.append(round(max(new_list_of_y), 2))
    plt.plot(new_list_of_x, new_list_of_y)

for num in range(len(varying_velocities)):
    fig_legend_list.append(f'{varying_velocities[num]} m/s results in {max_distance_part_three[num]}m max distance and '
                           f'{max_height_part_three[num]}m max height')

plt.title("Part Three (a)")
plt.xlabel("Distance (m)")
plt.ylabel("Height (m)")
plt.figlegend(fig_legend_list)
plt.show()

"""
Part 3b
Choose a text file to use (use the same from part 3a)
Define a list of four new angles of trajectory
Plot the trajectory of these four angles w/ all the other values remaining the same as previous parts
Since mass of object is 1kg, just assume force = acceleration
"""

varying_degrees = [10, 20, 30, 40]
varying_angles = []
for angle in varying_degrees:
    varying_angles.append(angle * np.pi / 180)

y_velocity_part_three_b = []
x_velocity_part_three_b = []
max_height_part_three_b = []
max_distance_part_three_b = []
fig_legend_list_three_b = []


def time_kinematic_three_b(y_vel_ini, const_acc, iteration_step):
    return_time = 2 * (-y_vel_ini) / const_acc
    return_time_list = list(np.arange(0, return_time, iteration_step))
    return return_time_list


def x_distances_three_b(list_of_time, v_initial, force):
    x_distance_list = []
    for n in range(len(list_of_time)):
        x_distance_list.append(v_initial * list_of_time[n] + (1 / 2) * force[n] * list_of_time[n] ** 2)
    return x_distance_list


def y_distances_three_b(list_of_time, v_initial):
    y_distances_list = []
    for t in list_of_time:
        y_distances_list.append(v_initial * t + (1 / 2) * (-9.8) * t ** 2)
    return y_distances_list


for angle in varying_angles:
    y_velocity_part_three_b.append(initial_velocity * np.sin(angle))
    x_velocity_part_three_b.append(initial_velocity * np.cos(angle))

for some_num in range(len(varying_angles)):
    new_list_of_time_three_b = time_kinematic_three_b(y_velocity_part_three_b[some_num], gravity, t_step)
    new_list_of_x_three_b = x_distances_three_b(new_list_of_time_three_b, x_velocity_part_three_b[some_num],
                                                list_of_forces)
    new_list_of_y_three_b = y_distances_three_b(new_list_of_time_three_b, y_velocity_part_three_b[some_num])
    max_distance_part_three_b.append(round(new_list_of_x_three_b[-1], 2))
    max_height_part_three_b.append(round(max(new_list_of_y_three_b), 2))
    plt.plot(new_list_of_x_three_b, new_list_of_y_three_b)

for num in range(len(varying_angles)):
    fig_legend_list_three_b.append(
        f'{varying_degrees[num]} degrees results in {max_distance_part_three_b[num]}m max distance and '
        f'{max_height_part_three_b[num]}m max height')

plt.title("Part Three (b)")
plt.xlabel("Distance (m)")
plt.ylabel("Height (m)")
plt.figlegend(fig_legend_list_three_b)
plt.show()
